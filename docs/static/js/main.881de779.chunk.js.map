{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OACE,sBAAMC,SAZa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAOhB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SApBoB,SAACP,GACzBF,EAAeE,EAAEQ,OAAOF,a,sCCTfG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACkCC,UAAUH,GAD5C,+DAEFI,MAAMF,GAFJ,cAEfG,EAFe,gBAGAA,EAAKC,OAHL,uBAGdC,EAHc,EAGdA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATjB,kBAYdM,GAZc,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEvC,OACE,sBAAKc,UAAU,6CAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,kCAAKA,EAAL,WCFOO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAGxB,ECJ0B,SAAEA,GAC5B,MAA0Bd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAsBA,OAjBAC,qBAAU,WACRxB,EAAQC,GACLwB,MAAM,SAAAC,GAGLH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAMd,CAACpB,IAIGqB,EDnB0BK,CAAa1B,GAAjCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAErB,OACE,qCACE,oBAAIJ,UAAU,wCAAd,SAAuDhB,IACtDoB,GAAW,mBAAGJ,UAAU,mCAAb,sBACZ,qBAAKA,UAAU,YAAf,SAEIH,EAAOJ,KAAI,SAACC,GAAD,OACT,cAAC,EAAD,eAEOA,GADAA,EAAIC,aESRgB,EAvBM,WAEnB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACE,qCACE,kDACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEI2C,EAAWnB,KAAK,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAEAA,SAAUA,GADLA,Y,MCZjB6B,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.881de779.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport const AddCategory = ({setCategories}) => {\n  \n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue( e.target.value );\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if( inputValue.trim().length > 2){\n      setCategories( cats => [inputValue, ...cats])\n      setInputValue('')\n    }\n\n    \n  }\n  \n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={ handleInputChange  }\n      />\n    </form>\n  )\n}\n\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}","export const getGifs = async( category ) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=bfJVhqXBjiNwtznMs2CG3RXcTvGN3ptn`\n  const resp = await fetch(url);\n  const {data} = await resp.json();\n\n  const gifs = data.map (img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  })\n  return(gifs)\n}","import React from 'react'\n\nexport const GifGridItem = ( {id, title, url} ) => {\n\n  return (\n    <div className=\"card animate__animated animate__fadeInLeft\">\n      <img src={url} alt={title}/>\n      <p> {title} </p>\n    </div>\n  )\n}\n","import React  from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n  // Custom hooks\n  const { data:images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeInLeft\">{category}</h3>\n      {loading && <p className=\"animate__animated animate__flash\">Loanding</p>}\n      <div className=\"card-grid\">\n        {\n          images.map((img) => (\n            <GifGridItem \n              key={img.id}\n              { ...img }\n            />\n          ))\n        }\n     </div>\n    </>\n\n  )\n}\n","import {useState} from 'react'\nimport { useEffect } from 'react/cjs/react.development'\nimport {getGifs} from '../helpers/getGifs'\n\nexport const useFetchGifs = ( category ) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect(() => {\n    getGifs(category)\n      .then( imgs => {\n        \n     \n        setState({\n          data: imgs,\n          loading: false\n        })\n\n\n\n      })\n  }, [category])\n\n\n\n  return state;\n}","import React, {useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n  const [categories, setCategories] = useState(['One punch']);\n\n  return (\n    <>\n      <h2> Gif Expert App </h2>\n      <AddCategory setCategories={ setCategories }/>\n      <hr/>\n      <ol>\n        { \n          categories.map( category => (\n            <GifGrid \n            key={category}\n            category={category}\n            />\n          ))\n        }\n      </ol>\n    </>\n  )\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}